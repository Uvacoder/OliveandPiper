<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  {% comment %}
  {% include 'breadcrumb' %}
  {% endcomment %}

  <div class="grid product-single">
    <div class="grid__item large--one-half product-images">
      <div class="product-single__photos large--right small--center" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'grande' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
      </div>

      {% comment %}
        Create thumbnails if we have more than one product image
      {% endcomment %}
      {% if product.images.size > 1 %}
        <ul class="product-single__thumbnails grid-uniform large--block-left small-center" id="ProductThumbs">

          {% for image in product.images %}
            <li class="grid__item one-quarter">
              <a href="{{ image.src | img_url: 'grande' }}" class="product-single__thumbnail">
                <img src="{{ image.src | img_url: 'small' }}" alt="{{ image.alt | escape }}">
              </a>
            </li>
          {% endfor %}

        </ul>
      {% endif %}
    </div>

    <div class="product-info grid__item large--one-half text-center right">

      <h1 itemprop="name">{{ product.title }}</h1>

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

        {% comment %}
          ID addToCartForm is a selector for the ajax cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical">

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
          {% endcomment %}

          <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
          <span id="ProductPrice" class="h2" itemprop="price">
            {{ current_variant.price | money }}
          </span>

          {% if product.compare_at_price_max > product.price %}
            <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span><s>{{ product.compare_at_price | money }}</s>
          {% endif %}


          <div class="selectors-container">
              <select name="id" id="productSelect" class="product-single__variants">
                {% for variant in product.variants %}
                  {% if variant.available %}

                    {% comment %}
                      Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                    {% endcomment %}
                    <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

                  {% else %}
                    <option disabled="disabled">
                      {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                    </option>
                  {% endif %}
                {% endfor %}
              </select>
              
              {% include 'product-customizer' %}

              <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
              <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">
          </div>

              <button type="submit" name="add" id="AddToCart" class="btn">
                <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
              </button>
        </form>
        


            <!-- ADD THIS SOCIAL SHARE BUTTONS -->
            <div class="addthis_sharing_toolbox"></div>


      </div>

      <div class="product-description rte large--full text-left" itemprop="description">
          {% comment %}
            This is the code for Product Description Accordion
          {% endcomment %}
          <div class="accordion-container">
            <a href="#" class="accordion-toggle" id="section1">Product Details <span class="toggle-icon"><i class="fa fa-angle-double-down"></i></span></a>
            <div class="accordion-content">{{ product.description }}</div>
            <!--/.accordion-content-->
          </div>
          <!--/.accordion-container-->
          <div class="accordion-container">
            <a href="#" class="accordion-toggle">Shipping <span class="toggle-icon"><i class="fa fa-angle-double-down"></i></span></a>
            <div class="accordion-content">FREE shipping to Canada and US on orders $49USD+ after discounts. </br></br>

In stock items are processed and shipped within 1-2 business days. If your order contains out of stock items, your order will ship in full once all items are available. </br></br>
            For more information about shipping, <a href="/pages/shipping-returns">click here</a>.</div>
            <!--/.accordion-content-->
          </div>
          <!--/.accordion-container-->
          <div class="accordion-container">
            <a href="#" class="accordion-toggle">Returns <span class="toggle-icon"><i class="fa fa-angle-double-down"></i></span></a>
            <div class="accordion-content">If your jewels don't make you say "olive it," you can return them for a refund or credit within 30 days of the ship date. Sale items and personalized items are a FINAL SALE and cannot be returned.</br></br>
            For more info on our return policy, <a href="/pages/shipping-returns">click here</a>.</div>
            <!--/.accordion-content-->
          </div>
          <!--/.accordion-container-->
      </div>

      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.

      {% if collection %}
        {% if collection.previous_product or collection.next_product %}
          <p>
            {% if collection.previous_product %}
              <span class="left">
                {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
              </span>
            {% endif %}
            {% if collection.next_product %}
              <span class="right">
                {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
              </span>
            {% endif %}
          </p>
        {% endif %}
      {% endif %}

      {% endcomment %}



  </div>

</div>

{% include 'related-products' %}



{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}


{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>

{% comment %}
  Script for Product Description accordion
{% endcomment %}
<script type="text/javascript">
$(document).ready(function () {
    $('.accordion-toggle').on('click', function(event){
      event.preventDefault();
      // create accordion variables
      var accordion = $(this);
      var accordionContent = accordion.next('.accordion-content');
      var accordionToggleIcon = $(this).children('.toggle-icon');
      
      // toggle accordion link open class
      accordion.toggleClass("open");
      // toggle accordion content
      accordionContent.slideToggle(250);
      
      // change plus/minus icon
      if (accordion.hasClass("open")) {
        accordionToggleIcon.html("<i class='fa fa-angle-double-up'></i>");
      } else {
        accordionToggleIcon.html("<i class='fa fa-angle-double-down'></i>");
      }
    });

    $("#section1").click();

});

</script>